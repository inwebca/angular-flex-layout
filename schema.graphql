# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

interface Question {
  id: Int!
  label: String!
  questionType: QuestionType!
  requiredSequence: Int
  title: String!
}

type Choice implements Question {
  displayedChoices: [DisplayedChoice!]
  id: Int!
  label: String!
  multipleAnswer: Boolean!
  questionType: QuestionType!
  requiredSequence: Int
  selectedChoices: [Int]
  title: String!
}

type Development implements Question {
  id: Int!
  label: String!
  questionDataType: QuestionDataType!
  questionType: QuestionType!
  requiredSequence: Int
  selectedChoice: String
  title: String!
}

type DisplayedChoice {
  id: Int!
  label: String!
  priority: Int
}

type DriverSurvey {
  driverEmployeeId: Int
  endDate: String
  hasGrief: Boolean
  labelDate: String
  labelDay: String
  questions: [Question!]
  startDate: String
  surveyDriverId: Int!
}

type Drop {
  appointmentTime: String!
  clientAddress: String!
  number: Int!
}

type Mutation {
  "Save a specific survey"
  driverSurvey(languageId: Int!, surveyChoices: DriverSurveyChoices!): DriverSurvey
}

type NestedChoice implements Question {
  allSelected: Boolean!
  displayedChoices: [NestedDisplayedChoice!]
  id: Int!
  label: String!
  questionType: QuestionType!
  requiredSequence: Int
  selectedChoices: [Int]
  title: String!
}

type NestedDisplayedChoice {
  choices: [DisplayedChoice!]
  idGroup: Int!
  label: String!
  showGroupOnly: Boolean
}

type Query {
  "Get a specific survey"
  driverSurvey(languageId: Int!, surveyDriverId: Int!): DriverSurvey
  "Get a list of surveys"
  driverSurveysSearch(criteria: DriverSurveySearchCriteria!, languageId: Int!): [DriverSurvey]
  "Get a list of suggested trips"
  suggestedTrips(driverEmployeId: Int!, languageId: Int!, surveyId: Int!): [Trip]
  "Get the trips details"
  tripDetails(languageId: Int!, tripId: Int!): TripDetails
  "Get the trips surveys based on survey choices"
  tripsSurveys(driverEmployeId: Int!, languageId: Int!, surveyId: Int!): [TripsSurveys]
}

type Trip {
  deptHour: String!
  destination: String!
  firstRdv: String!
  id: Int!
  milage: Int!
  type: String!
}

type TripDetails {
  departureDay: String!
  drops: [Drop]
  hasDangerousGoods: Boolean
  tripId: Int!
}

type TripsSurveys {
  labelDay: String!
  surveyId: Int!
  title: String
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum QuestionDataType {
  BOOLEAN
  DATE
  NUMBER
  STRING
}

enum QuestionType {
  CHOICE
  DEVELOPMENT
  NESTEDCHOICE
}

enum SurveyStatus {
  ACTIVE
  ATTRIBUTED
  CANCELED
  COMPLETED
  ENGINE_PROCESSED
}

input DriverSurveyChoices {
  questionPriority: [QuestionPriority]
  selectedChoices: [Int]
  selectedDevelopmentChoice: [SelectedDevelopmentChoice]
  surveyDriverId: Int!
}

input DriverSurveySearchCriteria {
  driverEmployeId: Int
  endDate: String
  managerEmployeId: Int
  startDate: String
  surveyId: Int
  surveyStatus: SurveyStatus
}

input QuestionPriority {
  id: Int!
  priority: Int!
}

input SelectedDevelopmentChoice {
  id: Int!
  selectedChoice: String!
}


"The `Upload` scalar type represents a file upload."
scalar Upload
